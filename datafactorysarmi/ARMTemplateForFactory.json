{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorysarmi"
		},
		"ls_azuresql_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_azuresql'"
		},
		"ls_datalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_datalake'"
		},
		"ls_onprem_file_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_onprem_file'"
		},
		"ls_api_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com"
		},
		"ls_azuresql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "adfserversarmi.database.windows.net"
		},
		"ls_azuresql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "adfdb"
		},
		"ls_azuresql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminsarmi"
		},
		"ls_datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfstoragesarmi.dfs.core.windows.net/"
		},
		"ls_onprem_file_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\SarmiFiles"
		},
		"ls_onprem_file_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "desktop-rh4glj8\\sarmitha"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/API_Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "API_json_migration",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "api_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sink_api",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T11:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/api_src')]",
				"[concat(variables('factoryId'), '/datasets/sink_api')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoldLayer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GoldDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Data Serving",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimProduct": {},
									"DimCustomer": {},
									"FactOrders": {},
									"FactOrder": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T11:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Data Serving')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onprem_Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.files",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Onprem_csv_migration",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@if(equals(item().file_name,'DimCategory.csv' ), pipeline().parameters.p_category_mapping,if(equals(item().file_name,'DimCustomer.csv' ), pipeline().parameters.p_customer_mapping,pipeline().parameters.p_product_mapping))",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "onprem_src",
											"type": "DatasetReference",
											"parameters": {
												"p_filename": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_onprem",
											"type": "DatasetReference",
											"parameters": {
												"p_filename": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"files": {
						"type": "array",
						"defaultValue": [
							{
								"file_name": "DimCategory.csv"
							},
							{
								"file_name": "DimCustomer.csv"
							},
							{
								"file_name": "DimProduct.csv"
							}
						]
					},
					"p_category_mapping": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "category_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "category_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "category_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "category_name",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_customer_mapping": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "customer_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "customer_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_product_mapping": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "product_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "product_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "product_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "product_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "category",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "category",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T11:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onprem_src')]",
				"[concat(variables('factoryId'), '/datasets/sink_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parent_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteOnprem",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Onprem_Ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"files": {
									"value": "@pipeline().parameters.files",
									"type": "Expression"
								},
								"p_category_mapping": {
									"value": "@pipeline().parameters.p_category_mapping",
									"type": "Expression"
								},
								"p_customer_mapping": {
									"value": "@pipeline().parameters.p_customer_mapping",
									"type": "Expression"
								},
								"p_product_mapping": {
									"value": "@pipeline().parameters.p_product_mapping",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteAPI",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteOnprem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_Ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteSQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SQL Ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Alerts",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ExecuteSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-16.northcentralus.logic.azure.com:443/workflows/d5419a6145c049c1a8b771e6ac7ca675/triggers/When_an_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_an_HTTP_request_is_received%2Frun&sv=1.0&sig=hC64ycirVBK4nZyhVWKXhw031_OOCXzIcOTPaHCvRlc",
							"body": {
								"value": "{\n    \"pipeline_name\": \"@{pipeline().Pipeline}\",\n    \"run_id\": \"@{pipeline().RunId}\",\n    \"status\": \"@{activity('ExecuteSQL').Status}\",\n    \"error\": \"@{if(equals(activity('ExecuteSQL').Status,'Failed'), string(activity('ExecuteSQL').error), 'No error')}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"files": {
						"type": "array",
						"defaultValue": [
							{
								"file_name": "DimCategory.csv"
							},
							{
								"file_name": "DimCustomer.csv"
							},
							{
								"file_name": "DimProduct.csv"
							}
						]
					},
					"p_category_mapping": {
						"type": "string",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "category_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "category_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "category_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "category_name",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_customer_mapping": {
						"type": "string",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "customer_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "customer_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_product_mapping": {
						"type": "string",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "product_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "product_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "product_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "product_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "category",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "category",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T11:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Onprem_Ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/API_Ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/SQL Ingestion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SQL_Incremental_Ingestion",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lastload",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Latestload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select * from dbo.FactOrders WHERE\norder_date>'@{activity('Lastload').output.firstRow.lastload}' AND order_date<='@{activity('Latestload').output.firstRow.latestload}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sql_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sink_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lastload",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lastload_lookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Latestload",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(order_date)as latestload from dbo.FactOrders;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sql_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SQL_Incremental_Ingestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "lastload",
										"value": {
											"value": "@activity('Latestload').output.firstRow.latestload",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "emptyjson_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "lastload_lookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T11:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_src')]",
				"[concat(variables('factoryId'), '/datasets/sink_sql')]",
				"[concat(variables('factoryId'), '/datasets/lastload_lookup')]",
				"[concat(variables('factoryId'), '/datasets/emptyjson_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverLayer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SilverDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Data Transformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimCategory": {},
									"DimCustomer": {},
									"DimProduct": {},
									"DimSupplier": {},
									"FactOrders": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T11:24:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Data Transformations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/api_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_api",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "Sarmitha-S/Azure-Data-Factory/refs/heads/main/DimSupplier.json"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_api')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emptyjson_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "empty.json",
						"folderPath": "monitor/empty",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lastload_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lastload.json",
						"folderPath": "monitor/lastload",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onprem_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onprem_file",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().p_filename",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onprem_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_api')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimSupplier.json",
						"folderPath": "api",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_onprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_filename",
							"type": "Expression"
						},
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sql",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuresql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuresql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_dimcategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimCategory.csv",
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_dimcustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimCustomer.csv",
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_dimproduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimProduct.csv",
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_dimsupplier')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimSupplier.json",
						"folderPath": "api",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_factorders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sql",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_api')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_api_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azuresql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_azuresql_properties_typeProperties_server')]",
					"database": "[parameters('ls_azuresql_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_azuresql_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_azuresql_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_datalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onprem_file')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ls_onprem_file_properties_typeProperties_host')]",
					"userId": "[parameters('ls_onprem_file_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_onprem_file_password')]"
					}
				},
				"connectVia": {
					"referenceName": "self-hosted",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/self-hosted')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/self-hosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Serving')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "DimProduct"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "DimCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "FactOrders"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "FactOrder"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ProductJoin"
						},
						{
							"name": "select"
						},
						{
							"name": "AggregateProd"
						},
						{
							"name": "Ranking"
						},
						{
							"name": "filterTop5"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "Customer"
						},
						{
							"name": "Reorder"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregateCust"
						},
						{
							"name": "Rank"
						},
						{
							"name": "filterTop"
						},
						{
							"name": "ReorderCols"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          product_id as short,",
						"          product_name as string,",
						"          category_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimProduct') ~> DimProduct",
						"source(output(",
						"          customer_id as short,",
						"          first_name as string,",
						"          full_name as string,",
						"          gender as string,",
						"          age as short,",
						"          age_category as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimCustomer') ~> DimCustomer",
						"source(output(",
						"          order_id as integer,",
						"          customer_id as integer,",
						"          product_id as integer,",
						"          supplier_id as integer,",
						"          category_id as integer,",
						"          order_date as date,",
						"          quantity as integer,",
						"          price as integer,",
						"          total_amount as integer,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactOrders') ~> FactOrders",
						"source(output(",
						"          order_id as integer,",
						"          customer_id as integer,",
						"          product_id as integer,",
						"          supplier_id as integer,",
						"          category_id as integer,",
						"          order_date as date,",
						"          quantity as integer,",
						"          price as integer,",
						"          total_amount as integer,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactOrders') ~> FactOrder",
						"FactOrders, DimProduct join(FactOrders@product_id == DimProduct@product_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoin",
						"ProductJoin select(mapColumn(",
						"          order_id,",
						"          customer_id,",
						"          product_id = FactOrders@product_id,",
						"          supplier_id,",
						"          category_id,",
						"          order_date,",
						"          quantity,",
						"          price,",
						"          total_amount,",
						"          order_status,",
						"          product_name,",
						"          category_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select aggregate(groupBy(product_name,",
						"          category_name),",
						"     Total_quantity = sum(quantity),",
						"          Amount = sum(total_amount)) ~> AggregateProd",
						"AggregateProd window(desc(Amount, true),",
						"     Top = denseRank()) ~> Ranking",
						"Ranking filter(Top<6) ~> filterTop5",
						"Reorder alterRow(insertIf(0==0)) ~> alterRow1",
						"FactOrder, DimCustomer join(FactOrder@customer_id == DimCustomer@customer_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Customer",
						"filterTop5 select(mapColumn(",
						"          Top,",
						"          product_name,",
						"          category_name,",
						"          Total_quantity,",
						"          Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Reorder",
						"Customer select(mapColumn(",
						"          order_id,",
						"          customer_id = FactOrder@customer_id,",
						"          product_id,",
						"          supplier_id,",
						"          category_id,",
						"          order_date,",
						"          quantity,",
						"          price,",
						"          total_amount,",
						"          order_status,",
						"          first_name,",
						"          full_name,",
						"          gender,",
						"          age,",
						"          age_category,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(full_name,",
						"          gender,",
						"          age_category),",
						"     Amount = sum(total_amount)) ~> aggregateCust",
						"aggregateCust window(desc(Amount, true),",
						"     Top = denseRank()) ~> Rank",
						"Rank filter(Top<6) ~> filterTop",
						"filterTop select(mapColumn(",
						"          Top,",
						"          Name = full_name,",
						"          gender,",
						"          age_category,",
						"          Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReorderCols",
						"ReorderCols alterRow(insertIf(0==0)) ~> alterRow2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'BusinessViews',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'BusinessViews',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Transformations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_dimcategory",
								"type": "DatasetReference"
							},
							"name": "DimCategory"
						},
						{
							"dataset": {
								"referenceName": "src_dimcustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "src_dimproduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						},
						{
							"dataset": {
								"referenceName": "src_dimsupplier",
								"type": "DatasetReference"
							},
							"name": "DimSupplier"
						},
						{
							"dataset": {
								"referenceName": "src_factorders",
								"type": "DatasetReference"
							},
							"name": "FactOrders"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "FilterCat",
							"description": "!isAdd expression for the filter"
						},
						{
							"name": "FilterCust"
						},
						{
							"name": "FilterProd"
						},
						{
							"name": "derivedColumnCountry"
						},
						{
							"name": "derivedColumnGender"
						},
						{
							"name": "derivedColumnAgegroup"
						},
						{
							"name": "select"
						},
						{
							"name": "derivedColumnFirstname"
						},
						{
							"name": "ReorderCols"
						},
						{
							"name": "castPrice"
						},
						{
							"name": "casttotalamt"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "alterRow4"
						},
						{
							"name": "alterRow5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          category_id as short,",
						"          category_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimCategory",
						"source(output(",
						"          customer_id as short,",
						"          full_name as string,",
						"          gender as string,",
						"          age as short,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimCustomer",
						"source(output(",
						"          product_id as short,",
						"          product_name as string,",
						"          category as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimProduct",
						"source(output(",
						"          city as string,",
						"          country as string,",
						"          supplier_id as short,",
						"          supplier_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> DimSupplier",
						"source(output(",
						"          order_id as integer,",
						"          customer_id as integer,",
						"          product_id as integer,",
						"          supplier_id as integer,",
						"          category_id as integer,",
						"          order_date as date,",
						"          quantity as integer,",
						"          price as decimal(10,2),",
						"          total_amount as decimal(10,2),",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> FactOrders",
						"DimCategory filter(!isNull(category_id)&&!isNull(category_name)) ~> FilterCat",
						"DimCustomer filter(!isNull(customer_id)) ~> FilterCust",
						"DimProduct filter(!isNull(product_id)) ~> FilterProd",
						"FilterCust derive(country = upper(country)) ~> derivedColumnCountry",
						"derivedColumnCountry derive(gender = iif(gender=='M', 'Male', 'Female')) ~> derivedColumnGender",
						"derivedColumnGender derive(age_category = iif(age<18,'Teen', \r",
						"    iif(age<40,'Adult','Senior'))) ~> derivedColumnAgegroup",
						"FilterProd select(mapColumn(",
						"          product_id,",
						"          product_name,",
						"          category_name = category",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"derivedColumnAgegroup derive(first_name = split(full_name, ' ')[1]) ~> derivedColumnFirstname",
						"derivedColumnFirstname select(mapColumn(",
						"          customer_id,",
						"          first_name,",
						"          full_name,",
						"          gender,",
						"          age,",
						"          age_category,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReorderCols",
						"FactOrders cast(output(",
						"          price as integer",
						"     ),",
						"     errors: true) ~> castPrice",
						"castPrice cast(output(",
						"          total_amount as integer",
						"     ),",
						"     errors: true) ~> casttotalamt",
						"FilterCat alterRow(upsertIf(2==2)) ~> alterRow1",
						"ReorderCols alterRow(upsertIf(0==0)) ~> alterRow2",
						"select alterRow(upsertIf(1==1)) ~> alterRow3",
						"DimSupplier alterRow(upsertIf(3==3)) ~> alterRow4",
						"casttotalamt alterRow(upsertIf(4==4)) ~> alterRow5",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimCategory',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['category_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimCustomer',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['customer_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimProduct',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['product_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimSupplier',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['supplier_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4",
						"alterRow5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactOrders',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['order_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_dimcategory')]",
				"[concat(variables('factoryId'), '/datasets/src_dimcustomer')]",
				"[concat(variables('factoryId'), '/datasets/src_dimproduct')]",
				"[concat(variables('factoryId'), '/datasets/src_dimsupplier')]",
				"[concat(variables('factoryId'), '/datasets/src_factorders')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		}
	]
}